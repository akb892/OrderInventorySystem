package com.cg.ims.entity;


import java.time.LocalDate;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity // Marks the class as a JPA entity
@Data // Lombok annotation to generate getters, setters, toString, equals, and hashCode methods
@NoArgsConstructor // Lombok annotation for a no-argument constructor
@AllArgsConstructor // Lombok annotation for a constructor with all fields
@Table(name = "stores") // Specifies the database table name for the entity
public class Stores {

    @Id
    @Column(name = "store_id") // Maps this field to the "store_id" column in the database
    private int storeId;

    @Column(name = "store_name") // Maps this field to the "store_name" column in the database
    private String storeName;

    @Column(name = "web_address") // Maps this field to the "web_address" column in the database
    private String webAddress;

    @Column(name = "physical_address") // Maps this field to the "physical_address" column in the database
    private String physicalAddress;

    @Column(name = "latitude") // Maps this field to the "latitude" column in the database
    private Double latitude;

    @Column(name = "longitude") // Maps this field to the "longitude" column in the database
    private Double longitude;

    @Lob // Indicates that the field is a large object (used for binary data such as images)
    @Column(name = "logo") // Maps this field to the "logo" column in the database
    private byte[] logo;

    @Column(name = "logo_mime_type") // Maps this field to the "logo_mime_type" column in the database
    private String logoMimeType;

    @Column(name = "logo_filename") // Maps this field to the "logo_filename" column in the database
    private String logoFileName;

    @Column(name = "logo_charset") // Maps this field to the "logo_charset" column in the database
    private String logoCharset;

    @Column(name = "logo_last_updated") // Maps this field to the "logo_last_updated" column in the database
    private LocalDate logoLastUpdated;

    // One-to-many relationship with the "Inventory" entity
    // This means each store can have multiple inventory entries
    @OneToMany(mappedBy = "store", cascade = CascadeType.ALL, orphanRemoval = true) 
    private List<Inventory> inventories;

    // One-to-many relationship with the "Orders" entity
    // This means each store can have multiple orders
    @OneToMany(mappedBy = "store", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Orders> orders;

    // One-to-many relationship with the "Shipments" entity
    // This means each store can have multiple shipments
    @OneToMany(mappedBy = "store", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Shipments> shipments;

    // Getter and setter methods for each field (auto-generated by Lombok)
    public int getStoreId() {
        return storeId;
    }

    public void setStoreId(int storeId) {
        this.storeId = storeId;
    }

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public String getWebAddress() {
        return webAddress;
    }

    public void setWebAddress(String webAddress) {
        this.webAddress = webAddress;
    }

    public String getPhysicalAddress() {
        return physicalAddress;
    }

    public void setPhysicalAddress(String physicalAddress) {
        this.physicalAddress = physicalAddress;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public byte[] getLogo() {
        return logo;
    }

    public void setLogo(byte[] logo) {
        this.logo = logo;
    }

    public String getLogoMimeType() {
        return logoMimeType;
    }

    public void setLogoMimeType(String logoMimeType) {
        this.logoMimeType = logoMimeType;
    }

    public String getLogoFileName() {
        return logoFileName;
    }

    public void setLogoFileName(String logoFileName) {
        this.logoFileName = logoFileName;
    }

    public String getLogoCharset() {
        return logoCharset;
    }

    public void setLogoCharset(String logoCharset) {
        this.logoCharset = logoCharset;
    }

    public LocalDate getLogoLastUpdated() {
        return logoLastUpdated;
    }

    public void setLogoLastUpdated(LocalDate logoLastUpdated) {
        this.logoLastUpdated = logoLastUpdated;
    }

    public List<Inventory> getInventories() {
        return inventories;
    }

    public void setInventories(List<Inventory> inventories) {
        this.inventories = inventories;
    }

    public List<Orders> getOrders() {
        return orders;
    }

    public void setOrders(List<Orders> orders) {
        this.orders = orders;
    }

    public List<Shipments> getShipments() {
        return shipments;
    }

    public void setShipments(List<Shipments> shipments) {
        this.shipments = shipments;
    }

    // Constructor with all fields (used by Lombok)
    public Stores(int storeId, String storeName, String webAddress, String physicalAddress, Double latitude,
                  Double longitude, byte[] logo, String logoMimeType, String logoFileName, String logoCharset,
                  LocalDate logoLastUpdated, List<Inventory> inventories, List<Orders> orders, List<Shipments> shipments) {
        super();
        this.storeId = storeId;
        this.storeName = storeName;
        this.webAddress = webAddress;
        this.physicalAddress = physicalAddress;
        this.latitude = latitude;
        this.longitude = longitude;
        this.logo = logo;
        this.logoMimeType = logoMimeType;
        this.logoFileName = logoFileName;
        this.logoCharset = logoCharset;
        this.logoLastUpdated = logoLastUpdated;
        this.inventories = inventories;
        this.orders = orders;
        this.shipments = shipments;
    }

    // Default constructor (used by JPA and Lombok)
    public Stores() {
        // Default constructor body (if needed)
    }
}
